###############################################################################
# Create the CI/CD deployment pipeline of an example project.
###############################################################################
AWSTemplateFormatVersion: '2010-09-09'
Description: Example CI/CD CodePipeline
Parameters:
  artifactsBucket:
    Type: String
  theSourceRepo:
    Type: String
  theSourceBranch:
    Type: String
  pipelineName:
    Type: String
  theBuilderImage:
    Type: String
  theDockerBuilder:
    Type: String
  theDeployerImage:
    Type: String

Resources:
  ##############################################################################
  # Build a Python wheel, this wheel is the Flask application to solve the
  # problem at hand.
  ##############################################################################
  wheelProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: example-wheel-build
      Description: Build and publish the Example wheel
      ServiceRole:
        Fn::ImportValue: exampleDeployRoleArnV2
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image:
          Ref: theBuilderImage
        EnvironmentVariables:
          - Name: mode
            Value: build_wheel
          - Name: image_name
            Value: example-server
          - Name: module_name
            Value: example
          - Name: region
            Value: 
              Ref: AWS::Region
          - Name: account_id
            Value:
              Ref: AWS::AccountId
      Source:
        BuildSpec: deployment/buildspec.yml
        Type: CODEPIPELINE
      TimeoutInMinutes: 60

  ##############################################################################
  # Build a Docker image with the previously created Python wheel installed
  ##############################################################################
  imageProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: example-image-build
      Description: Build and publish the Example image to ECR
      ServiceRole:
        Fn::ImportValue: exampleDeployRoleArnV2
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image:
          Ref: theDockerBuilder
        EnvironmentVariables:
          - Name: mode
            Value: build_image
          - Name: image_name
            Value: example-server
          - Name: module_name
            Value: example
          - Name: region
            Value: 
              Ref: AWS::Region
          - Name: account_id
            Value:
              Ref: AWS::AccountId
      Source:
        BuildSpec: deployment/buildspec.yml
        Type: CODEPIPELINE
      TimeoutInMinutes: 60

  ##############################################################################
  # Deploy the Docker image created into a Fargate cluster. 
  ##############################################################################
  fargateDeploy:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: exampleDeploy
      Description: Deploy the Example Docker image to ECS/Fargate
      ServiceRole:
        Fn::ImportValue: exampleDeployRoleArnV2
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image:
          Ref: theBuilderImage
        EnvironmentVariables:
          - Name: mode
            Value: deploy_fargate
          - Name: image_name
            Value: example-server
          - Name: module_name
            Value: example
          - Name: region
            Value: 
              Ref: AWS::Region
          - Name: account_id
            Value:
              Ref: AWS::AccountId
      Source:
        BuildSpec: deployment/buildspec.yml
        Type: CODEPIPELINE
      TimeoutInMinutes: 60

  ##############################################################################
  # Create the CodePipeline. The anatomy of most of my pipelines:
  # 2 ... n stages
  # Each stage has 1 ... n actions that do the real work
  # Actions are where the CodeBuild things are put into play
  ##############################################################################
  thePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name:
        Ref: pipelineName
      RoleArn:
        Fn::ImportValue: exampleDeployRoleArnV2
      ArtifactStore:
        Type: S3
        Location:
          Ref: artifactsBucket
           
      ##########################################################################
      # Stages are where the work gets done. The first stage is usually
      # getting source from somewhere.
      ##########################################################################
      Stages:
        - Name: GetExampleSource
          Actions:
            - Name: ExampleSource
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              Configuration:
                RepositoryName:
                  Ref: theSourceRepo
                BranchName:
                  Ref: theSourceBranch
              OutputArtifacts:
                - Name: exampleSource

      ##########################################################################
      # Build and publish the wheel and the Docker image.
      ##########################################################################
        - Name: BuildPublish
          Actions:
            - Name: BuildPublishWheel
              RunOrder: 1
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName:
                  Ref: wheelProject
              InputArtifacts:
                - Name: exampleSource
              OutputArtifacts:
                - Name: wheelOutput

            - Name: BuildPublishImage
              RunOrder: 2
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName:
                  Ref: imageProject
              InputArtifacts:
                - Name: exampleSource
              OutputArtifacts:
                - Name: imageOutput

      ##########################################################################
      # Create / Update the cluster with a CloudFormation stack.
      ##########################################################################
        - Name: DeployCluster
          Actions:
            - Name: ExampleCluster
              RunOrder: 1
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName:
                  Ref: fargateDeploy
              InputArtifacts:
                - Name: exampleSource
              OutputArtifacts:
                - Name: deployOutput
