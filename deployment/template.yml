AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Experiment
Parameters:
  acmCertArn:
    Type: String
  clusterName:
    Type: String
  fullyQualifidedHostName:
    Type: String
  desiredCount:
    Type: String
  maximumCount:
    Type: String
  cpuAllocation:
    Type: String
  exampleEnv:
    Type: String
  memoryAllocation:
    Type: String
  taskImage:
    Type: String
  hostedZoneId:
    Type: String
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Ref: clusterName
  exampleSecuityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ECS connections
      GroupName: example-host
      VpcId:
        Fn::ImportValue: appVPCV2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '1'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
  exampleSecuityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: exampleSecuityGroup
      IpProtocol: tcp
      FromPort: '1'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: exampleSecuityGroup
  cloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
          - '-'
          - - ECSLogGroup
            - Ref: AWS::StackName
      RetentionInDays: 7
  taskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: 'true'
          Image:
            Ref: taskImage
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: cloudwatchLogsGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: example-app
          Name: example-app
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: EXAMPLE_ENV
              Value:
                Ref: exampleEnv
      Cpu:
        Ref: cpuAllocation
      ExecutionRoleArn:
        Fn::ImportValue: exampleRoleArnV2
      Family:
        Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - -example-app
      Memory:
        Ref: memoryAllocation
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::ImportValue: exampleRoleArnV2
  exampleALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - Fn::ImportValue: publicSubnetOneV2
        - Fn::ImportValue: publicSubnetTwoV2
        - Fn::ImportValue: publicSubnetThreeV2
      SecurityGroups:
        - Ref: exampleSecuityGroup
  exampleTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: exampleALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: exampleTargetGroup
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetType: ip
      VpcId:
        Fn::ImportValue: appVPCV2
  exampleALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: exampleTargetGroup
      LoadBalancerArn:
        Ref: exampleALB
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            Ref: acmCertArn
  exampleService:
    Type: AWS::ECS::Service
    DependsOn:
      - exampleALBListener
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount:
        Ref: desiredCount
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: example-app
          ContainerPort: '80'
          TargetGroupArn:
            Ref: exampleTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Ref: exampleSecuityGroup
          Subnets:
            - Fn::ImportValue: privateSubnetOneV2
            - Fn::ImportValue: privateSubnetTwoV2
            - Fn::ImportValue: privateSubnetThreeV2
      TaskDefinition:
        Ref: taskDefinition
  exampleServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: exampleService
    Properties:
      MinCapacity:
        Ref: desiredCount
      MaxCapacity:
        Ref: maximumCount
      ResourceId:
        Fn::Join:
          - ''
          - - service/
            - Ref: ECSCluster
            - /
            - Fn::GetAtt:
                - exampleService
                - Name
      RoleARN:
        Fn::ImportValue: exampleRoleArnV2
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  queueLengthScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: QueueLengthScaleUp
      PolicyType: StepScaling
      ScalingTargetId:
        Ref: exampleServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 1
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 1
            MetricIntervalUpperBound: 20
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 20
            ScalingAdjustment: 2
  queueServiceScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: QueueLengthScaleDown
      PolicyType: StepScaling
      ScalingTargetId:
        Ref: exampleServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -100
  queueLengthAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '1'
      AlarmDescription: Alarm if queue length is >= 1 for one minute
      Period: '60'
      AlarmActions:
        - Ref: queueLengthScaleUpPolicy
      Namespace: AWS/SQS
      Dimensions:
        - Name: QueueName
          Value: example-queue
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: ApproximateNumberOfMessagesVisible
  queueLengthAlarmEmpty:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '1'
      AlarmDescription: Alarm if queue length is <1 for one minute
      Period: '60'
      AlarmActions:
        - Ref: queueServiceScaleDownPolicy
      Namespace: AWS/SQS
      Dimensions:
        - Name: QueueName
          Value: example-queue
      ComparisonOperator: LessThanThreshold
      MetricName: ApproximateNumberOfMessagesVisible
  labListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: exampleALBListener
    Properties:
      Actions:
        - TargetGroupArn:
            Ref: exampleTargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn:
        Ref: exampleALBListener
      Priority: 1
  ElasticsearchPublicDNSRecord:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - exampleALB
    Properties:
      HostedZoneId:
        Ref: hostedZoneId
      Name:
        Ref: fullyQualifidedHostName
      Type: CNAME
      TTL: '60'
      ResourceRecords:
        - Fn::GetAtt:
            - exampleALB
            - DNSName
